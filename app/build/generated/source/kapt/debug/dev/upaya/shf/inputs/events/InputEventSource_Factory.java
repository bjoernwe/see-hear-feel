// Generated by Dagger (https://dagger.dev).
package dev.upaya.shf.inputs.events;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import dev.upaya.shf.inputs.keys.IInputKeySource;
import javax.inject.Provider;
import kotlinx.coroutines.CoroutineDispatcher;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata({
    "dev.upaya.shf.inputs.keys.GlobalKeySource",
    "dev.upaya.shf.inputs.DefaultDispatcher"
})
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class InputEventSource_Factory implements Factory<InputEventSource> {
  private final Provider<IInputKeySource> inputKeySourceProvider;

  private final Provider<CoroutineDispatcher> dispatcherProvider;

  public InputEventSource_Factory(Provider<IInputKeySource> inputKeySourceProvider,
      Provider<CoroutineDispatcher> dispatcherProvider) {
    this.inputKeySourceProvider = inputKeySourceProvider;
    this.dispatcherProvider = dispatcherProvider;
  }

  @Override
  public InputEventSource get() {
    return newInstance(inputKeySourceProvider.get(), dispatcherProvider.get());
  }

  public static InputEventSource_Factory create(Provider<IInputKeySource> inputKeySourceProvider,
      Provider<CoroutineDispatcher> dispatcherProvider) {
    return new InputEventSource_Factory(inputKeySourceProvider, dispatcherProvider);
  }

  public static InputEventSource newInstance(IInputKeySource inputKeySource,
      CoroutineDispatcher dispatcher) {
    return new InputEventSource(inputKeySource, dispatcher);
  }
}
